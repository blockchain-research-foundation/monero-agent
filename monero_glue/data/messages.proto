syntax = "proto2";
import "types.proto";

/////////////
// Monero  //
/////////////

message MoneroRespError {
	optional uint32 status = 1;
	optional string reason = 2;
	optional string exc = 3;
}

message MoneroGetAddress {
    repeated uint32 address_n = 1;			// BIP-32 path to derive the key from master node
	optional bool show_display = 2;			// Optionally show on display before sending the result
	optional uint32 network_type = 3;		// Main-net / testnet / stagenet
	optional uint32 account = 4;            // Major subaddr index
	optional uint32 minor = 5;              // Minor subaddr index
}

message MoneroAddress {
    optional bytes address = 1;
}

message MoneroGetWatchKey {
    repeated uint32 address_n = 1;          // BIP-32 path to derive the key from master node
    optional uint32 network_type = 2;		// Main-net / testnet / stagenet
}

message MoneroWatchKey {
    optional bytes watch_key = 1;
    optional bytes address = 2;
}

message MoneroTsxInit {
    optional uint32 version = 1;
    repeated uint32 address_n = 2;
    optional uint32 network_type = 3;		// Main-net / testnet / stagenet
    optional MoneroTsxData tsx_data = 4;
}

message MoneroTsxInitResp {
    optional uint32 version = 1;
    optional uint32 status = 2;
    optional bool in_memory = 3;
    repeated bytes hmacs = 4;
}

message MoneroTsxSetInput {
    optional uint32 version = 1;
    optional bytes src_entr = 2;  // xmrtypes.TxSourceEntry
}

message MoneroTsxSetInputResp {
    optional bytes vini = 1;      // xmrtypes.TxinToKey
    optional bytes vini_hmac = 2;
    optional bytes pseudo_out = 3;
    optional bytes pseudo_out_hmac = 4;
    optional bytes alpha_enc = 5;
}

message MoneroTsxInputsPermutation {
    repeated uint32 perm = 1;
}

message MoneroTsxInputsPermutationResp {

}

message MoneroTsxInputVini {
    optional bytes src_entr = 1;  // xmrtypes.TxSourceEntry
    optional bytes vini = 2;      // xmrtypes.TxinToKey
    optional bytes vini_hmac = 3;
    optional bytes pseudo_out = 4;
    optional bytes pseudo_out_hmac = 5;
}

message MoneroTsxInputViniResp {

}

message MoneroTsxSetOutput {
    optional bytes dst_entr = 1;  // xmrtypes.TxDestinationEntry
    optional bytes dst_entr_hmac = 2;
}

message MoneroTsxSetOutputResp {
    optional bytes tx_out = 1;  // xmrtypes.TxOut
    optional bytes vouti_hmac = 2;
    optional bytes rsig = 3;
    optional bytes out_pk = 4;
    optional bytes ecdh_info = 5;
}

message MoneroTsxAllOutSet {

}

message MoneroRctSig {
    optional uint64 txn_fee = 1;
    optional bytes message = 2;
    optional uint32 rv_type = 3;
}

message MoneroTsxAllOutSetResp {
    optional bytes extra = 1;
    optional bytes tx_prefix_hash = 2;
    optional MoneroRctSig rv = 3;  // xmrtypes.RctSig
}

message MoneroTsxMlsagDone {

}

message MoneroTsxMlsagDoneResp {
    optional bytes full_message_hash = 1;
}

message MoneroTsxSignInput {
    optional bytes src_entr = 1; // xmrtypes.TxSourceEntry
    optional bytes vini = 2;     // xmrtypes.TxinToKey
    optional bytes vini_hmac = 3;
    optional bytes pseudo_out = 4;
    optional bytes pseudo_out_hmac = 5;
    optional bytes alpha = 6;
}

message MoneroTsxSignInputResp {
    optional bytes signature = 1;
    optional bytes cout = 2;
}

message MoneroTsxFinal {

}

message MoneroTsxFinalResp {
    optional bytes cout_key = 1;
    optional bytes salt = 2;
    optional bytes rand_mult = 3;
    optional bytes tx_enc_keys = 4;
}

message MoneroTsxSign {
    optional MoneroTsxInit init = 1;
    optional MoneroTsxSetInput set_input = 2;
    optional MoneroTsxInputsPermutation input_permutation = 3;
    optional MoneroTsxInputVini input_vini = 4;
    optional MoneroTsxSetOutput set_output = 5;
    optional MoneroTsxAllOutSet all_out_set = 6;
    optional MoneroTsxMlsagDone mlsag_done = 7;
    optional MoneroTsxSignInput sign_input = 8;
    optional MoneroTsxFinal final_msg = 9;
}

message MoneroKeyImageExportInit {
    optional uint64 num = 1;
    optional bytes hash = 2;
    repeated uint32 address_n = 3;               // BIP-32 path to derive the key from master node
    optional uint32 network_type = 4;		     // Main-net / testnet / stagenet
    repeated MoneroSubAddrIndicesList subs = 5;
}

message MoneroKeyImageExportInitResp {

}

message MoneroKeyImageSyncStep {
    repeated MoneroTransferDetails tdis = 1;
}

message MoneroKeyImageSyncStepResp {
    repeated MoneroExportedKeyImage kis = 1;
}

message MoneroKeyImageSyncFinal {

}

message MoneroKeyImageSyncFinalResp {
    optional bytes enc_key = 1;
}

message MoneroKeyImageSync {
    optional MoneroKeyImageExportInit init = 1;
    optional MoneroKeyImageSyncStep step = 2;
    optional MoneroKeyImageSyncFinal final_msg = 3;
}

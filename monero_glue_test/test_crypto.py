#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Author: Dusan Klinec, ph4r05, 2018

import random
import base64
import unittest
import pkg_resources
import requests
import asyncio
import aiounittest
import binascii

import monero_serialize as xmrser
from monero_serialize import xmrserialize, xmrtypes
from monero_glue import trezor, monero, common, crypto, agent


class CryptoTest(aiounittest.AsyncTestCase):
    """Simple tests"""

    def __init__(self, *args, **kwargs):
        super(CryptoTest, self).__init__(*args, **kwargs)

    def test_ed_crypto(self):
        sqr = crypto.fe_expmod(crypto.fe_sqrtm1, 2)
        self.assertEqual(sqr, crypto.fe_mod(-1))
        self.assertEqual(crypto.fe_A, crypto.fe_mod(2 * (1 - crypto.d) * crypto.inv(1 + crypto.d)))

        self.assertEqual(crypto.fe_expmod(crypto.fe_fffb1, 2), crypto.fe_mod(-2 * crypto.fe_A * (crypto.fe_A+2)))
        self.assertEqual(crypto.fe_expmod(crypto.fe_fffb2, 2), crypto.fe_mod( 2 * crypto.fe_A * (crypto.fe_A+2)))
        self.assertEqual(crypto.fe_expmod(crypto.fe_fffb3, 2), crypto.fe_mod(-crypto.fe_sqrtm1 * crypto.fe_A * (crypto.fe_A+2)))
        self.assertEqual(crypto.fe_expmod(crypto.fe_fffb4, 2), crypto.fe_mod( crypto.fe_sqrtm1 * crypto.fe_A * (crypto.fe_A+2)))

    def test_cn_fast_hash(self):
        inp = bytes(
            [0x25, 0x9e, 0xf2, 0xab, 0xa8, 0xfe, 0xb4, 0x73, 0xcf, 0x39, 0x05, 0x8a, 0x0f, 0xe3, 0x0b, 0x9f, 0xf6, 0xd2,
             0x45, 0xb4, 0x2b, 0x68, 0x26, 0x68, 0x7e, 0xbd, 0x6b, 0x63, 0x12, 0x8a, 0xff, 0x64, 0x05])
        res = crypto.cn_fast_hash(inp)
        self.assertEqual(res, bytes(
            [0x86, 0xdb, 0x87, 0xb8, 0x3f, 0xb1, 0x24, 0x6e, 0xfc, 0xa5, 0xf3, 0xb0, 0xdb, 0x09, 0xce, 0x3f, 0xa4, 0xd6,
             0x05, 0xb0, 0xd1, 0x0e, 0x65, 0x07, 0xca, 0xc2, 0x53, 0xdd, 0x31, 0xa3, 0xec, 0x16]))

    def test_hash_to_scalar(self):
        inp = bytes(
            [0x25, 0x9e, 0xf2, 0xab, 0xa8, 0xfe, 0xb4, 0x73, 0xcf, 0x39, 0x05, 0x8a, 0x0f, 0xe3, 0x0b, 0x9f, 0xf6, 0xd2,
             0x45, 0xb4, 0x2b, 0x68, 0x26, 0x68, 0x7e, 0xbd, 0x6b, 0x63, 0x12, 0x8a, 0xff, 0x64, 0x05])
        res = crypto.hash_to_scalar(inp)
        self.assertEqual(res, 0x6eca331dd53c2ca07650ed1b005d6a42aef0ffd0dfc092616124e255b920799)

    def test_hash_to_point(self):
        data = bytes(
            [0x42, 0xf6, 0x83, 0x5b, 0xf8, 0x31, 0x14, 0xa1, 0xf5, 0xf6, 0x07, 0x6f, 0xe7, 0x9b, 0xdf, 0xa0, 0xbd, 0x67,
             0xc7, 0x4b, 0x88, 0xf1, 0x27, 0xd5, 0x45, 0x72, 0xd3, 0x91, 0x0d, 0xd0, 0x92, 0x01])
        res = crypto.hash_to_ec(data)
        res_p = crypto.encodepoint(res)
        self.assertEqual(res_p, bytes(
            [0x54, 0x86, 0x3a, 0x04, 0x64, 0xc0, 0x08, 0xac, 0xc9, 0x9c, 0xff, 0xb1, 0x79, 0xbc, 0x6c, 0xf3, 0x4e, 0xb1,
             0xbb, 0xdf, 0x6c, 0x29, 0xf7, 0xa0, 0x70, 0xa7, 0xc6, 0x37, 0x6a, 0xe3, 0x0a, 0xb5]))

    def test_h(self):
        H = bytes([0x8b, 0x65, 0x59, 0x70, 0x15, 0x37, 0x99, 0xaf, 0x2a, 0xea, 0xdc, 0x9f, 0xf1, 0xad, 0xd0, 0xea, 0x6c,
                   0x72, 0x51, 0xd5, 0x41, 0x54, 0xcf, 0xa9, 0x2c, 0x17, 0x3a, 0x0d, 0xd3, 0x9c, 0x1f, 0x94])
        self.assertEqual(crypto.encodepoint(crypto.gen_H()), H)

    def test_h_pow(self):
        hp = crypto.gen_Hpow(10)
        self.assertEqual(crypto.encodepoint(hp[0]), crypto.encodepoint(crypto.gen_H()))
        self.assertEqual(crypto.encodepoint(hp[1]), crypto.encodepoint(crypto.scalarmult(crypto.gen_H(), 2)))
        self.assertEqual(crypto.encodepoint(hp[2]), crypto.encodepoint(crypto.scalarmult(crypto.gen_H(), 4)))
        self.assertEqual(crypto.encodepoint(hp[3]), crypto.encodepoint(crypto.scalarmult(crypto.gen_H(), 8)))

if __name__ == "__main__":
    unittest.main()  # pragma: no cover


